<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   applicationDPI="160"
			   creationComplete="init(event)">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.crypto.MD5;
			import flash.net.NetConnection;
			import flash.net.NetStream;
			import flash.system.Security;
			import flash.system.SecurityPanel;
			import mx.events.FlexEvent;
			import flash.media.Microphone;
			
			[Bindable]
			public  var netConnection:NetConnection = null;
			private var incomingNetStream:NetStream = null;
			private var outgoingNetStream:NetStream = null;
			private var mic:Microphone;
			[Bindable] private var microphoneList:Array;
			private var sessionid:String;
			private var auth_user:String;
			private var auth_domain:String;
			private var mic_index:int = -1;
			
			private var attachedUUID:String = "";
			
			[Bindable]
			private var soundOfPhoneRinging_MP3:Class;
			private var ringChannel:SoundChannel = null;
			private var ringUUID:String = "";
			private var soundOfPhoneRinging:Sound;
			
			private var rtmp_url:String = "rtmp://{{YOUR DOMAIN}}/phone";
			private var username:String = "{{SIP ID}}@{{SIP PRIVATE DOMAIN}}";
			private var password:String = "{{SIP PASSWORD}}";
			private var account:String = "{{SIP ID}}@{{SIP PRIVATE DOMAIN}}";
			
			public function presetup():void 
			{
				/* Load config here */
				soundOfPhoneRinging = new soundOfPhoneRinging_MP3();
			}
			
			protected function init(event:FlexEvent):void
			{
				NetConnection.defaultObjectEncoding = ObjectEncoding.AMF0;
				try {
					Security.allowDomain("*");	
				} catch(e:Error) {
					onDebug("Exception: " + e.toString());
				}
				
				connectionState.text="Not connected ";
				connect();
				setupMic();
			}
			
			public function connect():void{
				if (netConnection != null) {
					disconnect();
				}
				
				netConnection = new NetConnection();
				netConnection.client = this;
				netConnection.addEventListener( NetStatusEvent.NET_STATUS , netStatus );
				netConnection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				netConnection.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				netConnection.connect(rtmp_url);
			}
			
			public function disconnect():void {
				if (netConnection != null) {
					netConnection.close();
					netConnection = null;
					incomingNetStream = null;
					outgoingNetStream = null;	
				}
			}
			
			public function login(username:String, password:String):void {
				if (netConnection != null) {
					var pass:String = MD5.hash(sessionid + ":" + username + ":" + password);
					netConnection.call("login", null, username, pass );	
				}
				else {
					//ToDo
					onDebug("Login failed!");
				}
			}
			
			public function logout(account:String):void {
				if (netConnection != null) {
					netConnection.call("logout", null, account);
				}
			}
			
			public function makeCall(number:String, account:String, evt:Object):void {
				if (netConnection != null) {
					if (incomingNetStream == null) {
						setupStreams();
					}
					netConnection.call("makeCall", null, number, account, evt);
				}
			}
			
			private function setupMic():void {
				try {
					onDebug("Microphone.isSupported" + Microphone.isSupported);
					
					mic = Microphone.getMicrophone(mic_index);
					mic.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
					mic.addEventListener(StatusEvent.STATUS, statusHandler);
					mic.codec = SoundCodec.SPEEX;
					mic.setUseEchoSuppression(true);
					mic.setLoopBack(false);
					mic.setSilenceLevel(0,20000);
					mic.framesPerPacket = 1;
					mic.gain = 55;
					mic.rate = 16;
					mic_index = mic.index;
				
					if (outgoingNetStream != null) {
						outgoingNetStream.close();
						outgoingNetStream = new NetStream(netConnection);
						outgoingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
						outgoingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);		
						outgoingNetStream.attachAudio(mic);
						outgoingNetStream.publish("publish", "live");
					}
					onDebug("outgoingNetStream" + outgoingNetStream.info.toString());
				} catch(e:Error) {
					onDebug("Couldn't setup microphone: " + e.message);
				}
			}
			
			
			public function sendDTMF(digits:String, duration:int):void {
				if (netConnection != null) {
					netConnection.call("sendDTMF", null, digits, duration);
				}
			}
			
			public function answer(uuid:String):void {
				if (ringChannel != null) {
					ringChannel.stop();
					ringChannel = null;
				}
				if (incomingNetStream == null) {
					setupStreams();
				}
				if (netConnection != null) {
					netConnection.call("answer", null, uuid);
				}
			}
			
			public function hangup(uuid:String):void {
				if (uuid == attachedUUID) {
					destroyStreams();	
				}
				if (netConnection != null) {
					netConnection.call("hangup", null, uuid);
				}
			}
			
			public function register(account:String, nickname:String):void {
				if (netConnection != null) {
					netConnection.call("register", null, account, nickname);
				}
			}
			
			public function unregister(account:String, nickname:String):void {
				if (netConnection != null) {
					netConnection.call("unregister", null, account, nickname);
				}
			}
			
			public function attach(uuid:String):void {
				if (netConnection != null) {
					netConnection.call("attach", null, uuid);
				}
			}
			
			public function transfer(uuid:String, number:String):void {
				if (netConnection != null) {
					netConnection.call("transfer", null, uuid, number);
				}
			}
			
			public function three_way(uuid1:String, uuid2:String):void {
				if (netConnection != null) {
					netConnection.call("three_way", null, uuid1, uuid2);
				}
			}
			
			public function join(uuid1:String, uuid2:String):void {
				if (netConnection != null) {
					netConnection.call("join", null, uuid1, uuid2);
				}
			}
			
			public function sendevent(data:Object):void {
				if (netConnection != null) {
					netConnection.call("sendevent", null, data);
				}
			}
			
			public function getMic():int {
				return mic_index;
			}
			
			public function isMuted():Boolean {
				if (mic != null) {
					return mic.muted;
				} else {
					return false;
				}
			}
			
			public function showPrivacy():void {
				Security.showSettings(SecurityPanel.PRIVACY);
			}
			
			public function setVolume(value:Number):void {
				if (incomingNetStream != null) {
					var st:SoundTransform = new SoundTransform(value);
					incomingNetStream.soundTransform = st;
				}
			}
			
			public function setMicVolume(value:Number):void {
				if (outgoingNetStream != null) {
					var st:SoundTransform = new SoundTransform(value);
					outgoingNetStream.soundTransform = st;	
				}
			}
			
			
			protected function callBtn_clickHandler(event:MouseEvent):void
			{
				btnState.text = "callBtn clicked";
				makeCall(callDest.text, account, []);
			}
			
			protected function hangUpBtn_clickHandler(event:MouseEvent):void
			{
				btnState.text = "hangUpBtn clicked";
					destroyStreams();	
			}
			
			protected function speakerBtn_clickHandler(event:MouseEvent):void
			{
				if (SoundMixer.audioPlaybackMode == AudioPlaybackMode.VOICE)
				{
					SoundMixer.audioPlaybackMode = AudioPlaybackMode.AMBIENT;
				}
				else
				{
					SoundMixer.audioPlaybackMode = AudioPlaybackMode.VOICE;
				}
				onDebug(" +++ SoundMixer.audioPlaybackMode is " + SoundMixer.audioPlaybackMode + "+++   ");
			}
			
			protected function connectToSip_clickHandler(event:MouseEvent):void
			{
				if (netConnection != null) {
					connect();
				}
			}
			
			protected function loginBtn_clickHandler(event:MouseEvent):void
			{
				login(username, password);
			}
			
			private function destroyStreams():void {
				if (outgoingNetStream != null) {
					onDebug("Closing media streams")
					outgoingNetStream.close();	
					outgoingNetStream = null;
				}
				if (incomingNetStream != null) {
					incomingNetStream.close();	
					incomingNetStream = null;
				}
			}
			
			private function setupStreams():void {
				onDebug("Setup media streams");
				
				if (mic == null || mic.index != mic_index) {
					setupMic();
				}
				
				incomingNetStream = new NetStream(netConnection);
				incomingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				incomingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				incomingNetStream.client = this;
				incomingNetStream.bufferTime = 0;
				incomingNetStream.play("play");
				incomingNetStream.receiveAudio(true);

				outgoingNetStream = new NetStream(netConnection);
				outgoingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				outgoingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);		
				outgoingNetStream.attachAudio(mic);
				outgoingNetStream.publish("publish", "live");
				onDebug("outgoingNetStream: " + outgoingNetStream.info.toString());
			}
			
			
			public function connected(sid:String):void{
				sessionid = sid;
				
			}
			
			public function onHangup(uuid:String, cause:String):void {
				if (ringUUID == uuid && ringChannel != null) {
					ringChannel.stop();
					ringChannel = null;
				}
			}
			
			public function onLogin(result:String, user:String, domain:String):void {
				if (result == "success") {
					auth_user = user;
					auth_domain = domain;
				}
			}
			
			public function onLogout(user:String, domain:String):void {
			}
			
			public function onAttach(uuid:String):void {
				attachedUUID = uuid;
				
				if (ringChannel != null && uuid != "") {
					ringChannel.stop();
					ringChannel = null;
				}
				
				if (attachedUUID == "") {
					destroyStreams();
				}  else if (incomingNetStream == null || outgoingNetStream == null) {
					setupStreams();
				}
			}
			
			public function onMakeCall(uuid:String, number:String, account:String):void {
			}
			
			private function onDebug(message:String):void {
				connectionState.text = connectionState.text +  message;
			}
			
			private function onDisconnected():void {
				//ToDo
			}
			
			
			public function callState(uuid:String, state:String):void {
				//ToDo
			}
			
			public function displayUpdate(uuid:String, name:String, number:String):void {
				//ToDo
			}
			
			public function incomingCall(uuid:String, name:String, number:String, account:String, evt:Object):void {
				if (attachedUUID == "" && ringChannel == null) {
					ringUUID = uuid;
					ringChannel = soundOfPhoneRinging.play(0, 3);
				}
				
				if (evt != null) {
					if (evt.hasOwnProperty("rtmp_auto_answer")) {
						if (evt.rtmp_auto_answer == "true") {
							answer(uuid);
						}
					}
				}
			}
			
			
			public function event(event:Object):void {
				//ToDo				
			}
			private function securityErrorHandler(event:SecurityErrorEvent):void {
				onDebug("securityErrorHandler: " + event.text);
			}
			
			
			private function activityHandler(event:ActivityEvent):void {
				onDebug("activityHandler: " + event);
			}
			
			private function statusHandler(event:StatusEvent):void {
				onDebug("statusHandler: " + event);
			}
			
			private function netStatus (evt:NetStatusEvent ):void {		 
				onDebug("netStatus: " + evt.info.code);
				switch(evt.info.code) {
					
					case "NetConnection.Connect.Success":
						break;
					
					case "NetConnection.Connect.Failed":
						netConnection = null;
						incomingNetStream = null;
						outgoingNetStream = null;
						onDisconnected();
						break;
					
					case "NetConnection.Connect.Closed":
						netConnection = null;
						incomingNetStream = null;
						outgoingNetStream = null;
						onDisconnected();
						break;
					
					case "NetConnection.Connect.Rejected":
						netConnection = null;
						incomingNetStream = null;
						outgoingNetStream = null;
						onDisconnected();
						break;
					
					case "NetStream.Play.StreamNotFound":
						break;
					
					case "NetStream.Play.Failed":
						break;
					
					case "NetStream.Play.Start":	
						break;
					
					case "NetStream.Play.Stop":			
						break;
					
					case "NetStream.Buffer.Full":
						break;
					
					default:
						
				}	 
			}
			
			private function asyncErrorHandler(event:AsyncErrorEvent):void {
				onDebug("asyncErrorHandler: " + event.text);
				switch(event.text) {
					case "onLogin":
						break;
				}
			}
		]]>
	</fx:Script>
	<s:VGroup>
		<!-- Status of this sample -->
		<s:TextArea id="connectionState" width="100%" height="200"/>
		<!-- If auto connect failed, we can click connect to reconnect. -->
		<s:Button id="connectToSip" label="connect" click="connectToSip_clickHandler(event)" width="100%" height="30%"/>
		<!-- Login to the freeswitch. -->
		<s:Button id="loginBtn" label="login" click="loginBtn_clickHandler(event)"/>
		<!-- Dial the number you want to call. -->
		<s:TextInput id="callDest" prompt="Enter a number to call." width="100%" height="30%"/>
			<s:HGroup>
				<!-- Click call to call. -->
				<s:Button id="callBtn" label="call" click="callBtn_clickHandler(event)" width="50%"/>
				<!-- Click hangup to hangup. -->
				<s:Button id="hangUpBtn" label="hangup" click="hangUpBtn_clickHandler(event)"  width="50%"/>
			</s:HGroup>
		<!-- Click speaker to switch between phone voice speaker and speaker.(For mobile phone only, pads usually don't have to speaker.)  -->
		<s:Button id="speakerBtn" label="Switch Speaker" width="50%" click="speakerBtn_clickHandler(event)" />
		<!-- The state of the Call and hungup button. -->
		<s:Label id="btnState" width="100%" height="20%"/>
	</s:VGroup>
</s:Application>
